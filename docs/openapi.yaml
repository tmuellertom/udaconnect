---
openapi: 3.0.0
info:
  title: Person Endpoints
  description: This is a person API from Udacity
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/Virtus5/Company/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:30001/
  description: Person API
paths:
  /api/persons:
    get:
      tags:
      - gets person information
      summary: gets all pseron information
      description: |
        Gets the people information for all users in the Person api
      operationId: getAllPersons
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400":
          description: bad input parameter
        "404":
          description: not found
    post:
      tags:
      - creates a new person
      summary: creates a new person record
      description: |
        By passing the correct payload, you can create a
        new person/user to the system
      operationId: createPerson
      requestBody:
        description: Create a new person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "201":
          description: created new person
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400":
          description: bad input
  /api/persons/{personId}:
    get:
      tags:
      - gets person by id
      summary: gets person information by id
      description: |
        Gets person information by id
      operationId: getPersonById
      parameters:
      - name: personId
        in: path
        description: ID of the user to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400":
          description: bad input
        "404":
          description: not found
  /api/persons/{personId}/connection:
    get:
      tags:
      - get connection
      summary: gets connection
      description: |
        Gets conenction
      operationId: getConnection
      parameters:
      - name: personId
        in: path
        description: ID of the user to get conenction
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400":
          description: bad input
        "404":
          description: not found
components:
  schemas:
    Person:
      required:
      - company_name
      - first_name
      - id
      - last_name
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Thomas
        last_name:
          type: string
          example: Mueller
        company_name:
          type: string
          example: VSE AG
    Connection:
        type: object
        properties:
          person:
            type: object
            example:
              {id:300,first_name:Thomas,last_name:mueller,company_name:VSE}
          location:
            type: object
            example:
              {"creation_time": "2022-02-18T12:21:3.753130","longitude": "30.0","latitude": "100.0","id": 1,"person_id": 300}